[
{
		"title": "Home",
		"date":"Sat Mar 02 2024 00:46:45 GMT+0000 (Coordinated Universal Time)",
		"url":"/",
		"content": "Hi, I'm Paula\nThis is a <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/professional/code-snippets/i-digital-garden/\">port of my Obsidian Vault</a> online through Github Pages!\ndata, web, design -- Data Management &amp; Analysis, Web Development, Graphic Design/Desktop Publishing, Multimedia / Video Production, Desktop/Mobile Support\nWho I am\nI'm an analytical problem-solver who is:\nOrganized (I do things systematically and with order),\nEfficient (I create reproducible products and procedures), and\nResponsive (I get back to you every step of the way!)\nWhat I do\nData Analysis\n\nSQL(MSSQL Server, MySQL, PostgreSQL)\nNoSQL\nExcel, Power Query\nPowerBi\nTableau\nGoogle Data Studio\nPython(pandas and NumPy)\n\nWeb Development\n\nHTML5\nCSS3\nJavaScript, NodeJS\nCMS (WordPress, Drupal)\nVersion Control (Git, Github)\n\nMultimedia Design\n\nAdobe (Photoshop, Illustrator, Acrobat)\nAffinity Suite: Photo, Designer, Publisher\nVideo Production: Apple iMovie, DaVinci Resolve\nMicrosoft Office 365\n\nEducation\n\nM.S. - Information Systems\nB.A. - Mass Communication\n\nInterests\n\nItalian Language/Culture\nLearning new technology\nGraphic design\nData analytics\nTechnology Podcasts and Blogs\n\nContact Me",
		"tags": [ "note","Portfolio","gardenEntry"]
},

{
		"title": "Excel WEEKNUM function – convert week number to date and vice versa",
		"date":"Sat Mar 02 2024 00:46:45 GMT+0000 (Coordinated Universal Time)",
		"url":"/notes/LEARNING/INTERESTS/DATA/EXCEL/Excel WEEKNUM function – convert week number to date and vice versa/",
		"content": "=WEEKNUM(A2)",
		"tags": [ "note"]
},

{
		"title": "Transform Column Names in Bulk in Power Query - BI Gorilla",
		"date":"Sat Mar 02 2024 00:46:45 GMT+0000 (Coordinated Universal Time)",
		"url":"/learning/interests/data/excel/transform-column-names-in-bulk-in-power-query-bi-gorilla/",
		"content": "<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">BI and PQ DATA TIPS AND TRICKS</a>\nTransform Column Names in Bulk in Power Query - BI Gorilla\nIn this article, we’ll show you some simple and advanced techniques for replacing column names in bulk. From basic find and replace to more complex formulas, you can apply your logic to multiple columns at the same time.\nTable of contents\n\n1. Basic Transformations\n\n1.1. Replacing Characters\n1.2. Adding a Prefix or Suffix\n1.3. Changing Capitalization\n1.4. Clean or Trim Strings\n\n2. Advanced Transformations\n\n2.1. Conditionally Transform Column Names\n2.2. Split by Capital Letter / Uppercase to Lowercase\n2.3. Rename with Translation Table\n\nConclusion\n\n1. Basic Transformations\nThe easiest way to transform column names is by using the Table.TransformColumnNames function. This function is useful when applying a similar transformation to each of your columns.\nExamples are adding a prefix, capitalizing the first letters of a word, replacing underscores, etc. Let’s look at a few examples.\nThe syntax for this function is:\n= Table.TransformColumnNames(\ntable as table,\nnameGenerator as function,\noptional options as nullable record\n)\n\n1.1. Replacing Characters\nSometimes, column names come with characters you want to remove. For example, underscores or full stops in between words. To replace a character in all your column names at once, you can provide the following code:\n= Table.TransformColumnNames( Source, each Text.Replace( _, &quot;_&quot;, &quot; &quot; ) )\n// Replaces all underscores with a space\n\n= Table.TransformColumnNames( Source, each Text.Replace( _, &quot;.&quot;, &quot; &quot; ) )\n// Replaces all full stops with a space\n\n1.2. Adding a Prefix or Suffix\nIn some cases, it is useful to differentiate columns that come from different tables. Let’s say you have multiple calendars in your data model.\nTo make it clear columns come from a specific calendar, you add a prefix or suffix to the column names with the following code:\n= Table.TransformColumnNames( Source, each &quot;Prefix.&quot; &amp; _ )\n// Adds the text &quot;Prefix.&quot; in front of each column name\n\n= Table.TransformColumnNames( Source, each _ &amp; &quot;.Suffix&quot; )\n// Adds the text &quot;.Suffix&quot; after each column name\n\n1.3. Changing Capitalization\nIn a similar fashion, you can perform other transformations on your column names. Here are a few examples that work on the capitalization of letters:\n= Table.TransformColumnNames( Source, each Text.Lower( _ ) )\n// Transforms column names to lowercase\n\n= Table.TransformColumnNames( Source, each Text.Upper( _ ) )\n// Transforms column names to uppercase\n\n= Table.TransformColumnNames( Source, each Text.Proper( _ ) )\n// Capitalizes each word in the column names\n\n1.4. Clean or Trim Strings\nWhen your data has unnecessary characters or spacing, Text.Trim or Text.Clean can help.\n= Table.TransformColumnNames( Source, each Text.Trim( _ ) )\n// Removes leading and trailing whitespaces in column names\n\n= Table.TransformColumnNames( Source, each Text.Clean( _ ) )\n// Removes non printable characters in column names\n\nThese are just a few examples to give you an idea. For more specific requirements, you can apply other text functions to your columns.\n2. Advanced Transformations\nThis chapter deals with the more advanced transformations. The code may be a bit more complex, but it can really benefit your Power Query solution.\n2.1. Conditionally Transform Column Names\nSo far, we applied the transformations on each of the columns. Yet you may find it useful to restrict the transformation to only columns that meet a certain condition.\nLet’s say you have a calendar table that has some columns that contain the word “date”. You decide you want to mark all the columns that contain the word “date” with the prefix “Bingo.”. You can add your condition in your code by writing:\nTable.TransformColumnNames( Source,\neach if Text.Contains(_, &quot;date&quot; ) then &quot;Bingo.&quot; &amp; _ else _ )\n// Adds a prefix to each column name that contains the text &quot;date&quot;\n\nThe function first tests the condition and only prefixes any value where the condition is true. In all other cases, the original values are returned, represented by the underscore (_).\n2.2. Split by Capital Letter / Uppercase to Lowercase\nYou may have columns with names like “ProductType”, “DueDate”, and “ProductColor”. To make these more readable, you can split column names at each transition from lowercase to uppercase. This is a more advanced transformation; the easiest way to do that is the following.\nSelect a text column in your model, go to Transform, select Split Column and select By Lowercase to Uppercase. This generates a formula like:\nTable.SplitColumn(\n#&quot;Split Column by Character Transition&quot;,\n&quot;Product Color&quot;,\nSplitter.SplitTextByCharacterTransition({&quot;a&quot; .. &quot;z&quot;}, {&quot;A&quot; .. &quot;Z&quot;}),\n{&quot;Product Color.1&quot;, &quot;Product Color.2&quot;}\n)\n\n// From here you only need to copy the following part:\n= Splitter.SplitTextByCharacterTransition({&quot;a&quot; .. &quot;z&quot;}, {&quot;A&quot; .. &quot;Z&quot;})\n\nThis gives you a template for the function that splits your column names. You can use this template and combine it with the Table.TransformColumnNames function.\nThe Splitter.SplitTextByCharacterTransition function returns a function that splits text into a list of text values. Notice in the below example how I included “(_)” behind the splitter function. This instructs Power Query to perform the function on each of the current elements.\nAlso, since Splitter.SplitTextByCharacterTransition returns a list of strings you can wrap the results in a Text.Combine function that concatenates the values into a single text value.\nTable.TransformColumnNames(\nSource,\neach Text.Combine(\nSplitter.SplitTextByCharacterTransition({&quot;a&quot; .. &quot;z&quot;}, {&quot;A&quot; .. &quot;Z&quot;})(_)\n, &quot; &quot;)\n)\n\n2.3. Rename with Translation Table\nIn some cases, no general transformation will suffice. In a scenario like that, you can use a translation table to indicate rename your columns. This is not as dynamic but can prove useful if you work with multiple languages or just very specific needs. How does this work?\nThis solution makes use of the Table.RenameColumns function. The syntax for this function is:\n= Table.RenameColumns( table as table, // the table to rename columns on\nrenames as list, // pairs of old and new colum names as list\noptional missingField )\n\nFor your translation table, you can create a separate query called Rename that contains a column with the Old column names (OldName) and a column with the new column names (NewName).\n\nThe Table.RenameColumns function needs these values in the format:\n{ { OldName1, NewName1},\n{ OldName2, NewName2},\n{ OldName3, NewName3},\n{ OldName4, NewName4},\n{ OldName5, NewName5} }\n\nSince the Rename table contains two columns, you first need to transform these columns into the right format. You can do that either with List.Zip or with Table.ToRows.\nIn your main query, where you want to rename your columns, you can add one of the following two formulas.\n= Table.RenameColumns( Source,\nList.Zip( { Rename[OldName], Rename[NewName] } ),\nMissingField.Ignore )\n\n= Table.RenameColumns( Source,\nTable.ToRows( Rename[[OldName],[NewName]] ),\nMissingField.Ignore )\n\nIn case you try to rename a column that does not exist in your table, or when you make a spelling error, MissingField.Ignore makes sure this step does not throw an error. And when you need any changes to column names in the future, you can simply adjust the Replace table.\nConclusion\nWell, there you have it! Now you know how to rename lots of columns at once using Power Query. And remember, you can form conditions in any desired form. It’s just your creativity limiting the possibilities.\nHappy quering!",
		"tags": [ "note","Power_query","Data"]
},

{
		"title": "date-table-fy-column",
		"date":"Sat Mar 02 2024 00:46:45 GMT+0000 (Coordinated Universal Time)",
		"url":"/learning/interests/data/power-bi-dax/date-table-fy-column/",
		"content": "<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">BI and PQ DATA TIPS AND TRICKS</a>\nFISCAL YEAR M CODE\nhttps://www.youtube.com/watch?v=bo-43zg1R8U\nif [Month] &lt;7 then &quot;FY&quot; &amp;\nText.End(Number.ToText([Year]-1),2)\nelse\n&quot;FY&quot; &amp; Text.End(Number.ToText([Year]),2)\nDAX\nNEW TABLE --&gt;\nDateTable =\nVAR MinYear = YEAR ( MIN ( AF_DASHBOARD[GIFT DATE] ) )\nVAR MaxYear = YEAR ( MAX ( AF_DASHBOARD[GIFT DATE] ) )\nRETURN\nADDCOLUMNS (\nFILTER (\nCALENDARAUTO( ),\nAND ( YEAR ( [Date] ) &gt;= MinYear, YEAR ( [Date] ) &lt;= MaxYear )\n),\n&quot;Calendar Year&quot;, YEAR ( [Date] ),\n&quot;Month Name&quot;, FORMAT ( [Date], &quot;mmmm&quot; ),\n&quot;Month Number&quot;, MONTH ( [Date] ),\n&quot;Weekday&quot;, FORMAT ( [Date], &quot;dddd&quot; ),\n&quot;Weekday number&quot;, WEEKDAY( [Date] )//,\n// &quot;Quarter&quot;, &quot;Q&quot; &amp; TRUNC ( ( MONTH ( [Date] ) - 1 ) / 3 ) + 1\n)\n//Column\nFISCAL_YEAR =\nVAR _FiscalMonthStart=7\nRETURN\nIF(\nDateTable[Month Number] &gt;= _FiscalMonthStart,\nDateTable[Calendar Year] + 1,\nDateTable[Calendar Year]\n)\n//Column\nFYMONTH_NUM = IF(MONTH(DateTable[Date])&gt;6, MONTH(DateTable[Date])-6, MONTH(DateTable[Date]) +6)",
		"tags": [ "note","Power_bi","Power_query","m-code","dax","Data"]
},

{
		"title": "iDigital Garden",
		"date":"Sat Mar 02 2024 00:46:45 GMT+0000 (Coordinated Universal Time)",
		"url":"/professional/code-snippets/i-digital-garden/",
		"content": "Instructions: How to get Digital Garden to work for Github Pages!\nConcept: https://dg-docs.ole.dev/advanced/hosting-alternatives/\nSteps\n\nClone repository: https://github.com/oleeskild/digitalgarden\n\n(USE THIS TEMPLATE &gt; CREATE A NEW REPOSITORY)\nNAME THE REPOSITORY &quot;&lt;/GITHUBNAME/&gt;.github.io&quot;\n\nConfigure build.yml\n\nhttps://github.com/oleeskild/obsidian-digital-garden/discussions/389\n\nSet repository --&gt; Settings --&gt; Pages --&gt; Source (Deploy from a branch): gh-pages\n\nView Actions and see if they are successful!\n\nbuild.yml\nname: GH Pages\n\non:\npush:\nbranches: [ &quot;main&quot; ]\npull_request:\nbranches: [ &quot;main&quot; ]\n\n# permissions:\n# contents: read\n# pages: write\n# id-token: write\n\n# concurrency:\n# group: &quot;pages&quot;\n# cancel-in-progress: false\n\n# concurrency:\n# group: ${{ github.workflow }}-${{ github.ref }}\n\njobs:\nbuild:\n\nruns-on: ubuntu-22.04\n\nstrategy:\nmatrix:\nnode-version: [20.x]\n# See supported Node.js release schedule at https://nodejs.org/en/about/releases/\n\nsteps:\n- uses: actions/checkout@v4\n- name: Use Node.js ${{ matrix.node-version }}\nuses: actions/setup-node@v4\nwith:\nnode-version: ${{ matrix.node-version }}\ncache: 'npm'\n- run: npm install\n- run: npm run build --if-present\n\n- name: Deploy\nuses: peaceiris/actions-gh-pages@v3\nwith:\ngithub_token: ${{ secrets.GH_TOKEN2 }} # This is from /settings/secrets/actions --&gt; Repository secrets\npublish_dir: ./dist\n\nNOTE: INSTRUCTIONS FOR TOKEN --&gt; ACTION SECRET\nYou will need to add a GH_TOKEN secret to your repo, which should be a github API token having access to your repo. (You can reuse the one you have in your plugin settings)\nYou will also need to name your repository in github, `&lt;username&gt;.github.io`. So in your case `efemkay.github.io`. This is because otherwise the URL will be  `&lt;username&gt;.github.io/&lt;repositoryname&gt;`. This will cause errors when the site tries to get CSS and Javascript from URLs like  `&lt;username&gt;.github.io/styles/style.css`, because they are actually located in `&lt;username&gt;.github.io/&lt;repositoryname&gt;/styles/style.css`.\n\nREFERENCES\nhttps://dg-docs.ole.dev/getting-started/01-getting-started/\nhttps://github.com/marketplace/actions/github-pages-action\nhttps://github.com/peaceiris/actions-gh-pages\nProof of Concept: https://www.linkedin.com/pulse/eleventy-github-pages-lea-tortay\npossibly necessary: https://github.com/peaceiris/actions-gh-pages/issues/736\nand API key: https://stackoverflow.com/questions/76023778/action-failed-with-the-process-usr-bin-git-failed-with-exit-code-128",
		"tags": [ "note","inbox","Portfolio","code"]
}
]