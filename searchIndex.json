[
{
		"title": "Home",
		"date":"Sat Mar 02 2024 14:00:00 GMT+0000 (Coordinated Universal Time)",
		"url":"/",
		"content": "Hi, I'm Paula\nThis is a <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/professional/code-snippets/i-digital-garden/\">port of my Obsidian Vault</a> online through Github Pages!\ndata, web, design -- Data Management &amp; Analysis, Web Development, Graphic Design/Desktop Publishing, Multimedia / Video Production, Desktop/Mobile Support\nWho I am\nI'm an analytical problem-solver who is:\nOrganized (I do things systematically and with order),\nEfficient (I create reproducible products and procedures), and\nResponsive (I get back to you every step of the way!)\nWhat I do\nData Analysis\n\nSQL(MSSQL Server, MySQL, PostgreSQL)\nNoSQL\nExcel, Power Query\nPowerBi\nTableau\nGoogle Data Studio\nPython(pandas and NumPy)\n\nWeb Development\n\nHTML5\nCSS3\nJavaScript, NodeJS\nCMS (WordPress, Drupal)\nVersion Control (Git, Github)\n\nMultimedia Design\n\nAdobe (Photoshop, Illustrator, Acrobat)\nAffinity Suite: Photo, Designer, Publisher\nVideo Production: Apple iMovie, DaVinci Resolve\nMicrosoft Office 365\n\nEducation\n\nM.S. - Information Systems\nB.A. - Mass Communication\n\nInterests\n\nItalian Language/Culture\nLearning new technology\nGraphic design\nData analytics\nTechnology Podcasts and Blogs\n\nContact Me",
		"tags": [ "note","Portfolio","gardenEntry"]
},

{
		"title": "Excel WEEKNUM function – convert week number to date and vice versa",
		"date":"Sat Mar 02 2024 14:00:00 GMT+0000 (Coordinated Universal Time)",
		"url":"/notes/PERSONAL/DATA/EXCEL/Excel WEEKNUM function – convert week number to date and vice versa/",
		"content": "=WEEKNUM(A2)",
		"tags": [ "note"]
},

{
		"title": "Transform Column Names in Bulk in Power Query - BI Gorilla",
		"date":"Sat Mar 02 2024 14:00:00 GMT+0000 (Coordinated Universal Time)",
		"url":"/personal/data/excel/transform-column-names-in-bulk-in-power-query-bi-gorilla/",
		"content": "<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/professional/code-snippets/bi-and-pq-data-tips-and-tricks/\">BI and PQ DATA TIPS AND TRICKS</a>\nTransform Column Names in Bulk in Power Query - BI Gorilla\ntechniques for replacing column names in bulk.\nTable of contents\n1. Basic Transformations\nTable.TransformColumnNames\n= Table.TransformColumnNames(\ntable as table,\nnameGenerator as function,\noptional options as nullable record\n)\n\n1.1. Replacing Characters\n= Table.TransformColumnNames( Source, each Text.Replace( _, &quot;_&quot;, &quot; &quot; ) )\n// Replaces all underscores with a space\n\n= Table.TransformColumnNames( Source, each Text.Replace( _, &quot;.&quot;, &quot; &quot; ) )\n// Replaces all full stops with a space\n\n1.2. Adding a Prefix or Suffix\n= Table.TransformColumnNames( Source, each &quot;Prefix.&quot; &amp; _ )\n// Adds the text &quot;Prefix.&quot; in front of each column name\n\n= Table.TransformColumnNames( Source, each _ &amp; &quot;.Suffix&quot; )\n// Adds the text &quot;.Suffix&quot; after each column name\n\n1.3. Changing Capitalization\n= Table.TransformColumnNames( Source, each Text.Lower( _ ) )\n// Transforms column names to lowercase\n\n= Table.TransformColumnNames( Source, each Text.Upper( _ ) )\n// Transforms column names to uppercase\n\n= Table.TransformColumnNames( Source, each Text.Proper( _ ) )\n// Capitalizes each word in the column names\n\n1.4. Clean or Trim Strings\n= Table.TransformColumnNames( Source, each Text.Trim( _ ) )\n// Removes leading and trailing whitespaces in column names\n\n= Table.TransformColumnNames( Source, each Text.Clean( _ ) )\n// Removes non printable characters in column names\n\n2. Advanced Transformations\n2.1. Conditionally Transform Column Names\nTable.TransformColumnNames( Source,\neach if Text.Contains(_, &quot;date&quot; ) then &quot;Bingo.&quot; &amp; _ else _ )\n// Adds a prefix to each column name that contains the text &quot;date&quot;\n\n2.2. Split by Capital Letter / Uppercase to Lowercase\nTable.SplitColumn(\n#&quot;Split Column by Character Transition&quot;,\n&quot;Product Color&quot;,\nSplitter.SplitTextByCharacterTransition({&quot;a&quot; .. &quot;z&quot;}, {&quot;A&quot; .. &quot;Z&quot;}),\n{&quot;Product Color.1&quot;, &quot;Product Color.2&quot;}\n)\n\n// From here you only need to copy the following part:\n= Splitter.SplitTextByCharacterTransition({&quot;a&quot; .. &quot;z&quot;}, {&quot;A&quot; .. &quot;Z&quot;})\n\nTable.TransformColumnNames(\nSource,\neach Text.Combine(\nSplitter.SplitTextByCharacterTransition({&quot;a&quot; .. &quot;z&quot;}, {&quot;A&quot; .. &quot;Z&quot;})(_)\n, &quot; &quot;)\n)\n\n2.3. Rename with Translation Table\n= Table.RenameColumns( table as table, // the table to rename columns on\nrenames as list, // pairs of old and new colum names as list\noptional missingField )\n\n= Table.RenameColumns( Source,\nList.Zip( { Rename[OldName], Rename[NewName] } ),\nMissingField.Ignore )\n\n= Table.RenameColumns( Source,\nTable.ToRows( Rename[[OldName],[NewName]] ),\nMissingField.Ignore )",
		"tags": [ "note","Power_query","Data"]
},

{
		"title": "FISCAL_MONTH_NUMBER_CALC",
		"date":"Sat Mar 02 2024 14:00:00 GMT+0000 (Coordinated Universal Time)",
		"url":"/personal/data/power-bi-dax/fiscal-month-number-calc/",
		"content": "<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/professional/code-snippets/bi-and-pq-data-tips-and-tricks/\">BI and PQ DATA TIPS AND TRICKS</a>\nPOWER PIVOT DAX\nFISCAL_MONTH_NUMBER\n=if('Calendar'[Month Number]&lt;7,'Calendar'[Month Number]+6,MOD('Calendar'[Month Number],7)+1)",
		"tags": [ "note","Power_bi","Data"]
},

{
		"title": "date-table-fy-column",
		"date":"Sat Mar 02 2024 14:00:00 GMT+0000 (Coordinated Universal Time)",
		"url":"/personal/data/power-bi-dax/date-table-fy-column/",
		"content": "<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/professional/code-snippets/bi-and-pq-data-tips-and-tricks/\">BI and PQ DATA TIPS AND TRICKS</a>\nFISCAL YEAR M CODE\nhttps://www.youtube.com/watch?v=bo-43zg1R8U\nif [Month] &lt;7 then &quot;FY&quot; &amp;\nText.End(Number.ToText([Year]-1),2)\nelse\n&quot;FY&quot; &amp; Text.End(Number.ToText([Year]),2)\nDAX\nNEW TABLE --&gt;\nDateTable =\nVAR MinYear = YEAR ( MIN ( AF_DASHBOARD[GIFT DATE] ) )\nVAR MaxYear = YEAR ( MAX ( AF_DASHBOARD[GIFT DATE] ) )\nRETURN\nADDCOLUMNS (\nFILTER (\nCALENDARAUTO( ),\nAND ( YEAR ( [Date] ) &gt;= MinYear, YEAR ( [Date] ) &lt;= MaxYear )\n),\n&quot;Calendar Year&quot;, YEAR ( [Date] ),\n&quot;Month Name&quot;, FORMAT ( [Date], &quot;mmmm&quot; ),\n&quot;Month Number&quot;, MONTH ( [Date] ),\n&quot;Weekday&quot;, FORMAT ( [Date], &quot;dddd&quot; ),\n&quot;Weekday number&quot;, WEEKDAY( [Date] )//,\n// &quot;Quarter&quot;, &quot;Q&quot; &amp; TRUNC ( ( MONTH ( [Date] ) - 1 ) / 3 ) + 1\n)\n//Column\nFISCAL_YEAR =\nVAR _FiscalMonthStart=7\nRETURN\nIF(\nDateTable[Month Number] &gt;= _FiscalMonthStart,\nDateTable[Calendar Year] + 1,\nDateTable[Calendar Year]\n)\n//Column\nFYMONTH_NUM = IF(MONTH(DateTable[Date])&gt;6, MONTH(DateTable[Date])-6, MONTH(DateTable[Date]) +6)",
		"tags": [ "note","Power_bi","Power_query","m-code","dax","Data"]
},

{
		"title": "remove-duplicates-powerBI",
		"date":"Sat Mar 02 2024 14:00:00 GMT+0000 (Coordinated Universal Time)",
		"url":"/personal/data/power-bi-dax/remove-duplicates-power-bi/",
		"content": "<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/professional/code-snippets/bi-and-pq-data-tips-and-tricks/\">BI and PQ DATA TIPS AND TRICKS</a>\nremove duplicates from an individual cell PowerBi\n=Text.Combine (List.Distinct(List.Transform (Text.Split([EMAIL],&quot;,&quot;),each Text.Trim(_))),&quot;, &quot;)",
		"tags": [ "note","dax","Power_bi","Data"]
},

{
		"title": "How to Remove Duplicates in Power Query M (Complete Guide)",
		"date":"Sat Mar 02 2024 14:00:00 GMT+0000 (Coordinated Universal Time)",
		"url":"/personal/data/power-query-m/how-to-remove-duplicates-in-power-query-m-complete-guide/",
		"content": "<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/professional/code-snippets/bi-and-pq-data-tips-and-tricks/\">BI and PQ DATA TIPS AND TRICKS</a>\nHow to Remove Duplicates in Power Query M (Complete Guide)\nIn this article, we’ll explore how to remove duplicates in Power Query. We’ll cover basic and advanced methods for removing duplicates, including how to remove duplicates from single and multiple columns, how to remove duplicates case-insensitively, and how to keep values based on a condition.\nWe’ll also delve into an inconsistency problem, often related to sort order, that can occur when removing duplicates and how to solve it. By the end of this article, you’ll have a thorough understanding of how to remove duplicates in Power Query.\nTable of contents\n\nImportance of Removing Duplicates\nBasics for Removing Duplicates\n\nRemoving Duplicates from a Single Column\nRemoving Duplicates from Multiple Columns\nRemoving Duplicates Case-Insensitive\n\nInconsistent Results\nAdvanced Techniques for Removing Duplicates\n\nKeep First or Last Value\nKeep Earliest or Latest Value\nKeep Lowest or Highest Value\n\nConclusion\n\nImportance of Removing Duplicates\nEliminating duplicate rows is a critical step when cleaning your data in Power Query. Duplicates can cause problems in many situations. For example, when:\n\nPerforming a join: duplicates in your join table, result in duplicate rows in the destination table.\nCreating a dimension table: you can’t make a one-to-many relationship with duplicates on the one side.\nInspecting Values: duplicates can be an indication that an earlier join had duplicate values.\n\nTo prevent this, we need an expression to check for duplicates and filter our dataset only to include unique values.\nBasics for Removing Duplicates\nSo, how can you remove duplicates using the Power Query Editor? Under the hood, the operation uses the Table.Distinct function to remove duplicates. The syntax for the function is as follows:\n= Table.Distinct(\ntable as table,\noptional equationCriteria as any\n)\n\nThis function has two arguments: the first argument is the table to remove duplicates from, and the second argument is an optional equationCriteria that tells the function which columns to look at when removing duplicates. You can provide a column name, or instruct the function to respect or ignore capitals. If you omit the equationCriteria, the function will remove duplicates from the entire table.\nRemoving Duplicates from a Single Column\nLet’s start with removing duplicates from a single column. This is one of the most basic methods for removing duplicates in Power Query, and it’s really easy to do.\nTo remove duplicates from a single column, you:\n\nRight-click on the column that contains duplicates\nSelect the “Remove Duplicates” option.\nNow click OK.\n\nThat’s it! Power Query will remove all duplicates from the selected column.\n\nThe remove duplicates operation makes use of the Table.Distinct function in Power Query. When performing the operation on a single-column table, the above operation will show:\n= Table.Distinct( Source )\n\nThis removes duplicates from the entire table. When your table has multiple columns, the code below removes the duplicates from only the “Fruit” column.\n= Table.Distinct( Source, { &quot;Fruit&quot; } )\n\nBut what if you have duplicate values across multiple columns? No problem!\nRemoving Duplicates based on Multiple Columns\nThe easiest way to remove duplicates based on multiple columns is:\n\nHold down the CTRL Key.\nSelect the columns you want to remove duplicates from.\nClick on Remove Duplicates.\n\nNow, Power Query will delete all rows with duplicated values across the selected columns. This operation focuses on returning unique combinations of values.\n\n= Table.Distinct(\nSource,\n{ &quot;Brand&quot;, &quot;Country&quot;} )\n\nPerforming this operation still uses the Table.Distinct function. This time, the second argument contains both column names within a list. If you could use a refresher, have a look at list use-cases and syntax.\nSo you know how to remove duplicates from one or more columns, but what if you want to remove duplicates case-insensitive?\nRemoving Duplicates Case-Insensitive\nTo remove duplicates in a manner that is case-insensitive, you can make use of the optional equation argument of Table.Distinct. Whether you’re working with one or multiple columns or even the entire table, you can easily remove duplicates case-insensitive.\nSo, what if you have a dataset that contains duplicates, and you want to perform a case-sensitive removing duplicates operation on the Wood column? Removing duplicates (case sensitive) then only removes a row for the value ‘Cedar‘.\n\nTo achieve this, you can use Table.Distinct function and provide the column name “Wood” in the second argument. The result is a case-sensitive removal of duplicates as below.\n\nNow, let’s say you want to ignore the capitalization when removing duplicates. The easiest way to remove duplicates case-insensitive is by adding a comparer function:\n\nRight-click on the column that contains duplicates\nSelect Remove Duplicates\nProvide the column name and Comparer.OrdinalIgnoreCase as equation criteria.\nUse format: { “ColumnName”, Comparer.OrdinalIgnoreCase }\n\nThe result is a case-insensitive removal of duplicates.\n= Table.Distinct(\nSource,\n{ &quot;Wood&quot;, Comparer.OrdinalIgnoreCase } )\n\nBut what if you want to apply this method to multiple columns?\n= Table.Distinct(\nSource,\n{ { &quot;Wood&quot;, Comparer.OrdinalIgnoreCase },\n{ &quot;Area&quot;, Comparer.OrdinalIgnoreCase } } )\n\nYou can use the Table.Distinct function and provide the method to look for duplicates for every column. This allows you to specify whether to ignore capitalization (Comparer.OrdinalIgnoreCase) or respect capitalization (Comparer.Ordinal) for each column individually.\nSo there you have it – some basic methods for removing duplicates in Power Query. Whether you’re working with a single column, with multiple columns, or whether you check capital sensitive, Power Query makes it easy to get rid of the duplicates and get your data in tip-top shape.\nBut be aware that the methods shown so far don’t always return the same results. Let’s see why that is in the next section.\nInconsistent Results\nDid you know that the remove duplicates operation in Power Query often returns inconsistent results? It might sound strange, but it’s actually a side effect of certain optimizations that Power Query uses to be as efficient as possible.\nOne of these optimizations is Query Folding, which sends certain operations to the data source to be processed instead of in Power Query. While this can help make things faster and more efficient, it can also cause problems when it comes to removing duplicates. Without using additional measures, there’s no guarantee that removing duplicates returns the same records. That means you can’t assume that removing duplicates will return only the first duplicate row in your dataset.\nBut there’s a simple solution to this randomness problem. To make the remove duplicates operation predictable, you can use Table.Buffer. This function forces Power Query to cache the data in memory, which means that you can control which records are returned when removing duplicates.\nSo, if you want to ensure that you’re getting consistent results when removing duplicates, be sure to use Table.Buffer. We’ll dive deeper into this topic and explore advanced methods in the next chapter.\nAdvanced Techniques for Removing Duplicates\nSometimes, removing duplicates isn’t as straightforward as it seems, and you may need more advanced methods to get the job done. That’s where this chapter comes in – we’re going to explore some advanced methods for removing duplicates in Power Query.\nIn this chapter, we’ll dive into how you can remove duplicates based on a condition. We’ll look at retrieving the first or last value, the earliest or latest value and the lowest or highest value.\nKeep First or Last Value\nFirst, let’s talk about how to delete duplicates and keep the first or last value in your dataset. By default, Table.Distinct returns the first duplicate row it finds. But as we learned in the previous chapter, the sorting order of your table isn’t guaranteed, which can cause issues.\nTo ensure that we’re keeping the first or last value, we need to sort our data and make sure it stays sorted.\nTo remove duplicates and retrieve the first value in a dataset, you:\n\nSort your data\nSelect columns to remove duplicates from\nWrap the data in Table.Buffer\nRemove duplicates\n\nYou can do that with this dataset.\n\nPrepare your data by sorting the table and wrapping it in Table.Buffer. You can then select the Category column and click Remove duplicates, returning:\n\nYou will end up removing duplicates but keeping the first instance within your category. So to return the first value when removing duplicates, you sort your code with:\n= Table.Buffer(\nTable.Sort( Dataset,\n{ {&quot;Category&quot;, Order.Ascending },\n{&quot;Description&quot;, Order.Ascending } } ) )\n\nIf you want to keep the last value instead, you can simply sort your data in descending order by the column you want to keep the last value of. Then, wrap your data in Table.Buffer, and remove duplicates.\n= Table.Buffer(\nTable.Sort( Dataset,\n{ {&quot;Category&quot;, Order.Ascending },\n{&quot;Description&quot;, Order.Descending } } ) )\n\nKeep Earliest or Latest Value\nIn case you want to return the earliest or the latest value, you can perform something similar. To return unique rows for the category with the latest date, you:\n\nSort your data by Category and in a Descending order for your Date Column.\nRemove Duplicates from the relevant column(s).\n\n// Sorts and buffers data, so removing duplicates returns the latest category row\n= Table.Buffer(\nTable.Sort( Dataset,\n{ {&quot;Category&quot;, Order.Ascending },\n{&quot;Date&quot;, Order.Descending } } ) )\n\n// Sorts and buffers data, so removing duplicates returns the earliest category row\n= Table.Buffer(\nTable.Sort( Dataset,\n{ {&quot;Category&quot;, Order.Ascending },\n{&quot;Date&quot;, Order.Ascending } } ) )\n\nKeep Lowest or Highest Value\nThe last advanced method returns the lowest or highest value within a group. We could make use of the above method to achieve this. Yet, since I’m certain you will know how to sort your data in a similar way, let’s explore an alternative.\nTo remove duplicates and return the lowest value, you can:\n\nGroup your data.\nPerform an All Rows operation.\nAdjust the M-code to return the row with the lowest value.\nExpand the record column to get your result.\n\nLet’s see how that can work. The Group By operation returns only unique rows for the columns selected.\nTo group your data, go to the Home Tab, and select Group By.\n\nTo keep the lowest value for each Category, you can group your data by Category and perform an All Rows operation. This creates a table object with all summarized rows for each Category. This produces below code:\n\nWe’re going to change the formula above. A useful function is Table.Min. The Table.Min function returns the table row that contains the lowest value of a column. In other words, you can delete duplicate rows based on the column value.\nTo achieve this, adjust the code like in the below picture. Then, expand the record column by selecting the arrows in the column header.\n\nAfter clicking OK, you’ll end up with the desired result:\n\nTo instead keep the highest value when removing duplicates, you can simply swap out Table.Min for Table.Max. That means you either use:\n// Sorts and buffers data, so removing duplicates returns the latest category row\n= Table.Group( Dataset,\n{&quot;Category&quot;},\n{{&quot;Details&quot;, each Table.Min( _, &quot;Amount&quot; ) , type record }} )\n\n// Sorts and buffers data, so removing duplicates returns the earliest category row\n= Table.Group( Dataset,\n{&quot;Category&quot;},\n{{&quot;Details&quot;, each Table.Max( _, &quot;Amount&quot; ) , type record }} )\n\nYou can learn more about the Group By Operation or also read into the All Rows operation and how it works.\nConclusion\nAnd there, you have everything you need to know about removing duplicates in Power Query. Whether you’re dealing with a single column or multiple columns, case-sensitive or case-insensitive duplicates, or advanced methods for keeping the first, last, earliest, latest, lowest or highest values, Power Query has you covered.\nRemember, removing duplicates is an important step in cleaning your data. By removing duplicates, you can avoid issues with joins, dimension tables, and prepare your data for your data model.\nJust be aware of the randomness problem that can occur with the Table.Distinct function, and use Table.Buffer to ensure consistent results.\nHappy querying!",
		"tags": [ "note","Power_query","Data"]
},

{
		"title": "M Mode - Multiple Columns",
		"date":"Sat Mar 02 2024 14:00:00 GMT+0000 (Coordinated Universal Time)",
		"url":"/personal/data/power-query-m/m-mode-multiple-columns/",
		"content": "<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/professional/code-snippets/bi-and-pq-data-tips-and-tricks/\">BI and PQ DATA TIPS AND TRICKS</a>\n//let\n// Source = #&quot;Families-Parents-Students-LIST&quot;,\n// #&quot;Renamed Columns&quot; = Table.RenameColumns(Source,{{&quot;CHILD GRADE&quot;, &quot;GRADE&quot;}})\n//in\n// #&quot;Renamed Columns&quot;\nlet\n//Read in the data and set data types\nSource = Excel.CurrentWorkbook(){[Name=&quot;FAM&quot;]}[Content],\n#&quot;Changed Type&quot; = Table.TransformColumnTypes(Source,{\n{&quot;C_FNAME&quot;, type text}, {&quot;C_LNAME&quot;, type text}, {&quot;GRADE&quot;, type text},\n{&quot;FAMILY&quot;, type text}, {&quot;EMAIL&quot;, type text},{&quot;ADDRESS&quot;, type text},{&quot;PHONE&quot;, type text },{&quot;DONATION&quot;, type text}}),\n//Unpivot columns other than the two Parent columns\n#&quot;Unpivoted Other Columns&quot; = Table.UnpivotOtherColumns(#&quot;Changed Type&quot;,\n{&quot;EMAIL&quot;, &quot;PHONE&quot;, &quot;ADDRESS&quot;, &quot;DONATION&quot;, &quot;FAMILY&quot;}, &quot;Attribute&quot;, &quot;Value&quot;),\n//Group by the Parent Columns\n//Then add an index colum to each sub-table\n#&quot;Grouped Rows&quot; = Table.Group(#&quot;Unpivoted Other Columns&quot;, {&quot;EMAIL&quot;, &quot;PHONE&quot;, &quot;ADDRESS&quot;, &quot;DONATION&quot;, &quot;FAMILY&quot;}, {\n{&quot;idx&quot;, each Table.AddIndexColumn(_,&quot;idx&quot;),Int64.Type}}),\n//Add integer/divide by 3 column to each subtable to differentiate the different children\n//Note that we set the data type to Text for later combining with the Attributes\n#&quot;Added Custom&quot; = Table.AddColumn(#&quot;Grouped Rows&quot;, &quot;int/div&quot;,\neach Table.TransformColumnTypes(\nTable.AddColumn([idx], &quot;Integer-Division&quot;,\neach Number.IntegerDivide([idx], 3)),{&quot;Integer-Division&quot;,Text.Type})),\n//Combine Attribute and int/divide column to create unique names for each child/column\n#&quot;Added Custom1&quot; = Table.AddColumn(#&quot;Added Custom&quot;, &quot;childNum&quot;,\neach Table.CombineColumns([#&quot;int/div&quot;],\n{&quot;Attribute&quot;,&quot;Integer-Division&quot;},\nCombiner.CombineTextByDelimiter(&quot;.&quot;),&quot;Attribute&quot;)),\n//Remove unneeded columns\n#&quot;Removed Columns&quot; = Table.RemoveColumns(#&quot;Added Custom1&quot;,{&quot;idx&quot;, &quot;int/div&quot;}),\n//Pivot each sub-table\n#&quot;Added Custom2&quot; = Table.AddColumn(#&quot;Removed Columns&quot;, &quot;pivot subtable&quot;, each\nlet\n//Remove columns we don't want when we pivot\nx=Table.RemoveColumns([childNum],{&quot;EMAIL&quot;, &quot;PHONE&quot;, &quot;ADDRESS&quot;, &quot;DONATION&quot;, &quot;FAMILY&quot;, &quot;idx&quot;})\nin\nTable.Pivot(x,x[Attribute],&quot;Attribute&quot;,&quot;Value&quot;)),\n//Remove unneeded columns and expand the pivot subtables\n//May need to generate the list of expanded column names dynamically\n#&quot;Removed Columns1&quot; = Table.RemoveColumns(#&quot;Added Custom2&quot;,{&quot;childNum&quot;}),\n#&quot;Expanded pivot subtable&quot; = Table.ExpandTableColumn(#&quot;Removed Columns1&quot;, &quot;pivot subtable&quot;,\n{&quot;C_FNAME.0&quot;, &quot;C_LNAME.0&quot;, &quot;GRADE.0&quot;, &quot;C_FNAME.1&quot;, &quot;C_LNAME.1&quot;, &quot;GRADE.1&quot;, &quot;C_FNAME.2&quot;, &quot;C_LNAME.2&quot;, &quot;GRADE.2&quot;, &quot;C_FNAME.3&quot;, &quot;C_LNAME.3&quot;, &quot;GRADE.3&quot;,&quot;C_FNAME.4&quot;, &quot;C_LNAME.4&quot;, &quot;GRADE.4&quot;,&quot;C_FNAME.5&quot;, &quot;C_LNAME.5&quot;, &quot;GRADE.5&quot;},\n{&quot;C_FNAME.0&quot;, &quot;C_LNAME.0&quot;, &quot;GRADE.0&quot;, &quot;C_FNAME.1&quot;, &quot;C_LNAME.1&quot;, &quot;GRADE.1&quot;, &quot;C_FNAME.2&quot;, &quot;C_LNAME.2&quot;, &quot;GRADE.2&quot;, &quot;C_FNAME.3&quot;, &quot;C_LNAME.3&quot;, &quot;GRADE.3&quot;,&quot;C_FNAME.4&quot;, &quot;C_LNAME.4&quot;, &quot;GRADE.4&quot;,&quot;C_FNAME.5&quot;, &quot;C_LNAME.5&quot;, &quot;GRADE.5&quot;})\nin\n#&quot;Expanded pivot subtable&quot;",
		"tags": [ "note","Data","m-code","dax","Power_query"]
},

{
		"title": "M-CODE-mult-col",
		"date":"Sat Mar 02 2024 14:00:00 GMT+0000 (Coordinated Universal Time)",
		"url":"/personal/data/power-query-m/m-code-mult-col/",
		"content": "<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/professional/code-snippets/bi-and-pq-data-tips-and-tricks/\">BI and PQ DATA TIPS AND TRICKS</a>\n//let\n// Source = #&quot;Families-Parents-Students-LIST&quot;,\n// #&quot;Renamed Columns&quot; = Table.RenameColumns(Source,{{&quot;CHILD GRADE&quot;, &quot;GRADE&quot;}})\n//in\n// #&quot;Renamed Columns&quot;\nlet\n//Read in the data and set data types\nSource = Excel.CurrentWorkbook(){[Name=&quot;FAM&quot;]}[Content],\n#&quot;Changed Type&quot; = Table.TransformColumnTypes(Source,{\n{&quot;C_FNAME&quot;, type text}, {&quot;C_LNAME&quot;, type text}, {&quot;GRADE&quot;, type text},\n{&quot;FAMILY&quot;, type text}, {&quot;EMAIL&quot;, type text},{&quot;ADDRESS&quot;, type text},{&quot;PHONE&quot;, type text },{&quot;DONATION&quot;, type text}}),\n//Unpivot columns other than the two Parent columns\n#&quot;Unpivoted Other Columns&quot; = Table.UnpivotOtherColumns(#&quot;Changed Type&quot;,\n{&quot;EMAIL&quot;, &quot;PHONE&quot;, &quot;ADDRESS&quot;, &quot;DONATION&quot;, &quot;FAMILY&quot;}, &quot;Attribute&quot;, &quot;Value&quot;),\n//Group by the Parent Columns\n//Then add an index colum to each sub-table\n#&quot;Grouped Rows&quot; = Table.Group(#&quot;Unpivoted Other Columns&quot;, {&quot;EMAIL&quot;, &quot;PHONE&quot;, &quot;ADDRESS&quot;, &quot;DONATION&quot;, &quot;FAMILY&quot;}, {\n{&quot;idx&quot;, each Table.AddIndexColumn(_,&quot;idx&quot;),Int64.Type}}),\n//Add integer/divide by 3 column to each subtable to differentiate the different children\n//Note that we set the data type to Text for later combining with the Attributes\n#&quot;Added Custom&quot; = Table.AddColumn(#&quot;Grouped Rows&quot;, &quot;int/div&quot;,\neach Table.TransformColumnTypes(\nTable.AddColumn([idx], &quot;Integer-Division&quot;,\neach Number.IntegerDivide([idx], 3)),{&quot;Integer-Division&quot;,Text.Type})),\n//Combine Attribute and int/divide column to create unique names for each child/column\n#&quot;Added Custom1&quot; = Table.AddColumn(#&quot;Added Custom&quot;, &quot;childNum&quot;,\neach Table.CombineColumns([#&quot;int/div&quot;],\n{&quot;Attribute&quot;,&quot;Integer-Division&quot;},\nCombiner.CombineTextByDelimiter(&quot;.&quot;),&quot;Attribute&quot;)),\n//Remove unneeded columns\n#&quot;Removed Columns&quot; = Table.RemoveColumns(#&quot;Added Custom1&quot;,{&quot;idx&quot;, &quot;int/div&quot;}),\n//Pivot each sub-table\n#&quot;Added Custom2&quot; = Table.AddColumn(#&quot;Removed Columns&quot;, &quot;pivot subtable&quot;, each\nlet\n//Remove columns we don't want when we pivot\nx=Table.RemoveColumns([childNum],{&quot;EMAIL&quot;, &quot;PHONE&quot;, &quot;ADDRESS&quot;, &quot;DONATION&quot;, &quot;FAMILY&quot;, &quot;idx&quot;})\nin\nTable.Pivot(x,x[Attribute],&quot;Attribute&quot;,&quot;Value&quot;)),\n//Remove unneeded columns and expand the pivot subtables\n//May need to generate the list of expanded column names dynamically\n#&quot;Removed Columns1&quot; = Table.RemoveColumns(#&quot;Added Custom2&quot;,{&quot;childNum&quot;}),\n#&quot;Expanded pivot subtable&quot; = Table.ExpandTableColumn(#&quot;Removed Columns1&quot;, &quot;pivot subtable&quot;,\n{&quot;C_FNAME.0&quot;, &quot;C_LNAME.0&quot;, &quot;GRADE.0&quot;, &quot;C_FNAME.1&quot;, &quot;C_LNAME.1&quot;, &quot;GRADE.1&quot;, &quot;C_FNAME.2&quot;, &quot;C_LNAME.2&quot;, &quot;GRADE.2&quot;, &quot;C_FNAME.3&quot;, &quot;C_LNAME.3&quot;, &quot;GRADE.3&quot;,&quot;C_FNAME.4&quot;, &quot;C_LNAME.4&quot;, &quot;GRADE.4&quot;,&quot;C_FNAME.5&quot;, &quot;C_LNAME.5&quot;, &quot;GRADE.5&quot;},\n{&quot;C_FNAME.0&quot;, &quot;C_LNAME.0&quot;, &quot;GRADE.0&quot;, &quot;C_FNAME.1&quot;, &quot;C_LNAME.1&quot;, &quot;GRADE.1&quot;, &quot;C_FNAME.2&quot;, &quot;C_LNAME.2&quot;, &quot;GRADE.2&quot;, &quot;C_FNAME.3&quot;, &quot;C_LNAME.3&quot;, &quot;GRADE.3&quot;,&quot;C_FNAME.4&quot;, &quot;C_LNAME.4&quot;, &quot;GRADE.4&quot;,&quot;C_FNAME.5&quot;, &quot;C_LNAME.5&quot;, &quot;GRADE.5&quot;})\nin\n#&quot;Expanded pivot subtable&quot;\n\nlet\n//Read in the data and set data types\nSource = Excel.CurrentWorkbook(){[Name=&quot;FAM&quot;]}[Content],\n#&quot;Changed Type&quot; = Table.TransformColumnTypes(Source,{\n{&quot;student_id&quot;, Int64.Type}, {&quot;Child_LAST_NAME&quot;, type text}, {&quot;Child_FIRST_NAME&quot;, type text} {&quot;CHILD_GRADE&quot;, type text},\n{&quot;Final_Amount&quot;, Int64.Type},{&quot;PARTICIPATED&quot;,type text}}),\n//Unpivot columns other than the two transactions\n#&quot;Unpivoted Other Columns&quot; = Table.UnpivotOtherColumns(#&quot;Changed Type&quot;,\n{&quot;student_id&quot;, &quot;LAST_NAME&quot;, &quot;CHILD_LAST_NAME&quot;, &quot;CHILD_FIRST_NAME&quot;, &quot;CHILD_GRADE&quot;,&quot;PARTICIPATED&quot;}, &quot;Attribute&quot;, &quot;Value&quot;),\n//Group by the LAST_NAME Columns\n//Then add an index colum to each sub-table\n#&quot;Grouped Rows&quot; = Table.Group(#&quot;Unpivoted Other Columns&quot;, {&quot;EMAIL&quot;, &quot;PHONE&quot;, &quot;ADDRESS&quot;, &quot;DONATION&quot;, &quot;FAMILY&quot;}, {\n{&quot;idx&quot;, each Table.AddIndexColumn(_,&quot;idx&quot;),Int64.Type}}),\n//Add integer/divide by 3 column to each subtable to differentiate the different children\n//Note that we set the data type to Text for later combining with the Attributes\n#&quot;Added Custom&quot; = Table.AddColumn(#&quot;Grouped Rows&quot;, &quot;int/div&quot;,\neach Table.TransformColumnTypes(\nTable.AddColumn([idx], &quot;Integer-Division&quot;,\neach Number.IntegerDivide([idx], 3)),{&quot;Integer-Division&quot;,Text.Type})),\n//Combine Attribute and int/divide column to create unique names for each child/column\n#&quot;Added Custom1&quot; = Table.AddColumn(#&quot;Added Custom&quot;, &quot;childNum&quot;,\neach Table.CombineColumns([#&quot;int/div&quot;],\n{&quot;Attribute&quot;,&quot;Integer-Division&quot;},\nCombiner.CombineTextByDelimiter(&quot;.&quot;),&quot;Attribute&quot;)),\n//Remove unneeded columns\n#&quot;Removed Columns&quot; = Table.RemoveColumns(#&quot;Added Custom1&quot;,{&quot;idx&quot;, &quot;int/div&quot;}),\n//Pivot each sub-table\n#&quot;Added Custom2&quot; = Table.AddColumn(#&quot;Removed Columns&quot;, &quot;pivot subtable&quot;, each\nlet\n//Remove columns we don't want when we pivot\nx=Table.RemoveColumns([childNum],{&quot;EMAIL&quot;, &quot;PHONE&quot;, &quot;ADDRESS&quot;, &quot;DONATION&quot;, &quot;FAMILY&quot;, &quot;idx&quot;})\nin\nTable.Pivot(x,x[Attribute],&quot;Attribute&quot;,&quot;Value&quot;)),\n//Remove unneeded columns and expand the pivot subtables\n//May need to generate the list of expanded column names dynamically\n#&quot;Removed Columns1&quot; = Table.RemoveColumns(#&quot;Added Custom2&quot;,{&quot;childNum&quot;}),\n#&quot;Expanded pivot subtable&quot; = Table.ExpandTableColumn(#&quot;Removed Columns1&quot;, &quot;pivot subtable&quot;,\n{&quot;Child_FNAME.0&quot;, &quot;Child_LNAME.0&quot;, &quot;GRADE.0&quot;, &quot;Child_FNAME.1&quot;, &quot;Child_LNAME.1&quot;, &quot;GRADE.1&quot;, &quot;Child_FNAME.2&quot;, &quot;Child_LNAME.2&quot;, &quot;GRADE.2&quot;},\n{&quot;Child_FNAME.0&quot;, &quot;Child_LNAME.0&quot;, &quot;GRADE.0&quot;, &quot;Child_FNAME.1&quot;, &quot;Child_LNAME.1&quot;, &quot;GRADE.1&quot;, &quot;Child_FNAME.2&quot;, &quot;Child_LNAME.2&quot;, &quot;GRADE.2&quot;})\nin\n#&quot;Expanded pivot subtable&quot;",
		"tags": [ "note","Power_query","Data"]
},

{
		"title": "PQ_addressee_COUPLE_LASTNAMES",
		"date":"Sat Mar 02 2024 14:00:00 GMT+0000 (Coordinated Universal Time)",
		"url":"/personal/data/power-query-m/pq-addressee-couple-lastnames/",
		"content": "<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/professional/code-snippets/bi-and-pq-data-tips-and-tricks/\">BI and PQ DATA TIPS AND TRICKS</a>\nADDRESSEE_SLN (SAME LAST NAME)\nif [Spouse Nickname] = null then\nText.Combine({[Nickname],&quot; &quot;, [Last Name]})\nelse if [Spouse Nickname] &lt;&gt; null and [Last Name] = [Spouse Last Name] then\nText.Combine({[Nickname],&quot; and &quot;, [Spouse Nickname], &quot; &quot;, [Last Name]})\nelse if [Last Name] &lt;&gt; [Spouse Last Name] then null\nelse null\nADDRESSEE DIFFERENT LASTNAME\nif [Spouse Nickname] = null then\nnull\nelse if [Spouse Nickname] &lt;&gt; null and [Last Name] = [Spouse Last Name] then\nnull\nelse if [Last Name] &lt;&gt; [Spouse Last Name] then\nText.Combine({[Nickname],&quot; &quot;,[Last Name], &quot; and &quot;,[Spouse Nickname],&quot; &quot;,[Spouse Last Name]})\nelse null\nlet\nSource = Excel.CurrentWorkbook(){[Name=&quot;Table1&quot;]}[Content],\n#&quot;Added Custom&quot; = Table.AddColumn(Source, &quot;SAME_LASTNAME&quot;, each if [Last Name] = [Spouse Last Name] then &quot;Y&quot; else &quot;N&quot;),\n#&quot;Added Custom1&quot; = Table.AddColumn(#&quot;Added Custom&quot;, &quot;ADDRESSEE_SLN&quot;, each if [Spouse Nickname] = null then\nText.Combine({[Nickname],&quot; &quot;, [Last Name]})\nelse if [Spouse Nickname] &lt;&gt; null and [Last Name] = [Spouse Last Name] then\nText.Combine({[Nickname],&quot; and &quot;, [Spouse Nickname], &quot; &quot;, [Last Name]})\nelse if [Last Name] &lt;&gt; [Spouse Last Name] then null\nelse null),\n#&quot;Added Custom2&quot; = Table.AddColumn(#&quot;Added Custom1&quot;, &quot;DIFF_LASTNAME&quot;, each if [Spouse Nickname] = null then\nnull\nelse if [Spouse Nickname] &lt;&gt; null and [Last Name] = [Spouse Last Name] then\nnull\nelse if [Last Name] &lt;&gt; [Spouse Last Name] then\nText.Combine({[Nickname],&quot; &quot;,[Last Name], &quot; and &quot;,[Spouse Nickname],&quot; &quot;,[Spouse Last Name]})\nelse null),\n#&quot;Merged Columns&quot; = Table.CombineColumns(#&quot;Added Custom2&quot;,{&quot;ADDRESSEE_SLN&quot;, &quot;DIFF_LASTNAME&quot;},Combiner.CombineTextByDelimiter(&quot;&quot;, QuoteStyle.None),&quot;ADDRESSEE&quot;),\n#&quot;Removed Columns&quot; = Table.RemoveColumns(#&quot;Merged Columns&quot;,{&quot;SAME_LASTNAME&quot;}),\n#&quot;Reordered Columns&quot; = Table.ReorderColumns(#&quot;Removed Columns&quot;,{&quot;ADDRESSEE&quot;, &quot;Constituent ID&quot;, &quot;Nickname&quot;, &quot;Last Name&quot;, &quot;Spouse Nickname&quot;, &quot;Spouse Last Name&quot;, &quot;Constituency Code&quot;, &quot;Primary Addressee&quot;, &quot;Alumnae Council&quot;, &quot;Alumnae Council Date&quot;, &quot;Alumnae Class Reps&quot;, &quot;Alumnae Class Reps Date&quot;, &quot;HouseholdID&quot;}),\n#&quot;Removed Columns1&quot; = Table.RemoveColumns(#&quot;Reordered Columns&quot;,{&quot;Primary Addressee&quot;, &quot;HouseholdID&quot;}),\n#&quot;Changed Type&quot; = Table.TransformColumnTypes(#&quot;Removed Columns1&quot;,{{&quot;Constituent ID&quot;, type text}}),\n#&quot;Promoted Headers&quot; = Table.PromoteHeaders(#&quot;Changed Type&quot;, [PromoteAllScalars=true]),\n#&quot;Changed Type1&quot; = Table.TransformColumnTypes(#&quot;Promoted Headers&quot;,{{&quot;Alumnae Class Reps Date&quot;, type date}, {&quot;Alumnae Council Date&quot;, type date}}),\n#&quot;Replaced Value&quot; = Table.ReplaceValue(#&quot;Changed Type1&quot;,&quot;Maryland&quot;,&quot;MD&quot;,Replacer.ReplaceText,{&quot;Preferred State&quot;}),\n#&quot;Replaced Value1&quot; = Table.ReplaceValue(#&quot;Replaced Value&quot;,&quot;District of Columbia&quot;,&quot;DC&quot;,Replacer.ReplaceText,{&quot;Preferred State&quot;}),\n#&quot;Replaced Value2&quot; = Table.ReplaceValue(#&quot;Replaced Value1&quot;,&quot;Virginia&quot;,&quot;VA&quot;,Replacer.ReplaceText,{&quot;Preferred State&quot;}),\n#&quot;Replaced Value3&quot; = Table.ReplaceValue(#&quot;Replaced Value2&quot;,&quot;Colorado&quot;,&quot;CO&quot;,Replacer.ReplaceText,{&quot;Preferred State&quot;}),\n#&quot;Replaced Value4&quot; = Table.ReplaceValue(#&quot;Replaced Value3&quot;,&quot;South Carolina&quot;,&quot;SC&quot;,Replacer.ReplaceText,{&quot;Preferred State&quot;}),\n#&quot;Replaced Value5&quot; = Table.ReplaceValue(#&quot;Replaced Value4&quot;,&quot;Florida&quot;,&quot;FL&quot;,Replacer.ReplaceText,{&quot;Preferred State&quot;}),\n#&quot;Replaced Value6&quot; = Table.ReplaceValue(#&quot;Replaced Value5&quot;,&quot;Indiana&quot;,&quot;IN&quot;,Replacer.ReplaceText,{&quot;Preferred State&quot;}),\n#&quot;Replaced Value7&quot; = Table.ReplaceValue(#&quot;Replaced Value6&quot;,&quot;North Carolina&quot;,&quot;NC&quot;,Replacer.ReplaceText,{&quot;Preferred State&quot;}),\n#&quot;Changed Type2&quot; = Table.TransformColumnTypes(#&quot;Replaced Value7&quot;,{{&quot;Alumnae Council Date&quot;, type text}, {&quot;Alumnae Class Reps Date&quot;, type text}}),\n#&quot;Merged Columns1&quot; = Table.CombineColumns(Table.TransformColumnTypes(#&quot;Changed Type2&quot;, {{&quot;Alumnae Council&quot;, type text}}, &quot;en-US&quot;),{&quot;Alumnae Council&quot;, &quot;Alumnae Council Date&quot;},Combiner.CombineTextByDelimiter(&quot; - &quot;, QuoteStyle.None),&quot;ALUM_COUNCIL&quot;),\n#&quot;Merged Columns2&quot; = Table.CombineColumns(#&quot;Merged Columns1&quot;,{&quot;Alumnae Class Reps&quot;, &quot;Alumnae Class Reps Date&quot;},Combiner.CombineTextByDelimiter(&quot; - &quot;, QuoteStyle.None),&quot;ALUM_CLASS_REPS&quot;),\n#&quot;Renamed Columns&quot; = Table.RenameColumns(#&quot;Merged Columns2&quot;,{{&quot;Nickname Last Name and Spouse Nickname Spouse Last Name&quot;, &quot;ADDRESSEE&quot;}}),\n#&quot;Changed Type4&quot; = Table.TransformColumnTypes(#&quot;Renamed Columns&quot;,{{&quot;Preferred ZIP&quot;, type text}}),\n#&quot;Grouped Rows&quot; = Table.Group(#&quot;Changed Type4&quot;, {&quot;ADDRESSEE&quot;,&quot;Household_NAME&quot;}, {{&quot;ADDRESS&quot;, each Text.Combine(List.Distinct([Preferred Address Line 1]),&quot;, &quot;), type text}, {&quot;CITY&quot;, each Text.Combine(List.Distinct([Preferred City]),&quot;, &quot;), type text}, {&quot;STATE&quot;, each Text.Combine(List.Distinct([Preferred State]),&quot;, &quot;), type nullable text}, {&quot;ZIP&quot;, each Text.Combine(List.Distinct([Preferred ZIP]),&quot;, &quot;), type text}}),\n#&quot;Uppercased Text&quot; = Table.TransformColumns(#&quot;Grouped Rows&quot;,{{&quot;Household_NAME&quot;, Text.Upper, type text}}),\n#&quot;Changed Type3&quot; = Table.TransformColumnTypes(#&quot;Uppercased Text&quot;,{{&quot;ZIP&quot;, type text}})\nin\n#&quot;Changed Type3&quot;",
		"tags": [ "note","Power_query","Data"]
},

{
		"title": "REMOVE DUPLICATES",
		"date":"Sat Mar 02 2024 14:00:00 GMT+0000 (Coordinated Universal Time)",
		"url":"/personal/data/power-query-m/remove-duplicates/",
		"content": "<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/professional/code-snippets/bi-and-pq-data-tips-and-tricks/\">BI and PQ DATA TIPS AND TRICKS</a>\nRemove duplicates from an individual cell\n=Text.Combine (List.Distinct(List.Transform (Text.Split([EMAIL],&quot;,&quot;),each Text.Trim(_))),&quot;, &quot;)",
		"tags": [ "note","Power_query","Data"]
},

{
		"title": "REPLACE VALUES, MULTIPLE CRITERIA ",
		"date":"Sat Mar 02 2024 14:00:00 GMT+0000 (Coordinated Universal Time)",
		"url":"/personal/data/power-query-m/replace-values-multiple-criteria/",
		"content": "<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/professional/code-snippets/bi-and-pq-data-tips-and-tricks/\">BI and PQ DATA TIPS AND TRICKS</a>\nhttps://gorilla.bi/power-query/replace-values/\n= Table.ReplaceValue(#&quot;Added Custom&quot;,\neach [Amount],\n//each if [ConditionTrue] = &quot;YES&quot; then 0 else [Amount],\neach if [id] = 1 and [First Name] = &quot;joe&quot; then 0 else [Amount],\nReplacer.ReplaceValue,{&quot;Amount&quot;})",
		"tags": [ "note","Power_query","Data"]
},

{
		"title": "UPPERCASE-AND-UNDERSCORE-COLUMN-NAMES",
		"date":"Sat Mar 02 2024 14:00:00 GMT+0000 (Coordinated Universal Time)",
		"url":"/personal/data/power-query-m/uppercase-and-underscore-column-names/",
		"content": "<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/professional/code-snippets/bi-and-pq-data-tips-and-tricks/\">BI and PQ DATA TIPS AND TRICKS</a>\nTable.TransformColumnNames( Source, each Text.Upper( _ ) )\n// CAPITALIZES All Column Names\nTable.TransformColumnNames(UppercasedText, each Text.Replace( , &quot; &quot;, &quot;&quot; ) )\n// Replaces all full stops with a space\nEXAMPLE IN EDITOR\nUppercasedText = Table.TransformColumnNames(#&quot;Renamed Columns4&quot;, each Text.Upper( _ ) ),\nAddUnderScore = Table.TransformColumnNames(UppercasedText, each Text.Replace( _, &quot;.&quot;, &quot; &quot; ))",
		"tags": [ "note","Power_query","Data"]
},

{
		"title": "count-non-null-values-in-group-by-count",
		"date":"Sat Mar 02 2024 14:00:00 GMT+0000 (Coordinated Universal Time)",
		"url":"/personal/data/power-query-m/count-non-null-values-in-group-by-count/",
		"content": "<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/professional/code-snippets/bi-and-pq-data-tips-and-tricks/\">BI and PQ DATA TIPS AND TRICKS</a>\n{&quot;Count&quot;, each Table.RowCount(_), Int64.Type}})\n{&quot;Count&quot;, each List.NonNullCount(_), Int64.Type}})\nList.Count(List.RemoveNulls(Record.ToList(Record.RemoveFields(_,&quot;Total Sales&quot;))))\nTable.RowCount(Table.SelectRows(_,(x)=&gt;x[Total Sales]&lt;&gt;null)),\nSOLUTION --&gt; GroupBY Table count of non null values\nhttps://community.fabric.microsoft.com/t5/Desktop/Distinct-Count-with-no-blank-values-using-power-query/td-p/2211994",
		"tags": [ "note","Power_query","Data"]
},

{
		"title": "pq - number rows by group",
		"date":"Sat Mar 02 2024 14:00:00 GMT+0000 (Coordinated Universal Time)",
		"url":"/personal/data/power-query-m/pq-number-rows-by-group/",
		"content": "<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/professional/code-snippets/bi-and-pq-data-tips-and-tricks/\">BI and PQ DATA TIPS AND TRICKS</a>\nPQ NUMBER ROW BY GROUP\nnecessary for AF DASHBOARD (get oldest kid only from a family and show transactions for that family)",
		"tags": [ "note","Power_query","Data","STP"]
},

{
		"title": "BI and PQ DATA TIPS AND TRICKS",
		"date":"Sat Mar 02 2024 14:00:00 GMT+0000 (Coordinated Universal Time)",
		"url":"/professional/code-snippets/bi-and-pq-data-tips-and-tricks/",
		"content": "File\nDATE\ntags\n\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/notes/personal-data-excel-excel-weeknum-function-convert-week-number-to-date-and-vice-versa\">Excel WEEKNUM function – convert week number to date and vice versa</a>\n03-02-2024\nExcelData\n\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/personal/data/excel/transform-column-names-in-bulk-in-power-query-bi-gorilla/\">Transform Column Names in Bulk in Power Query - BI Gorilla</a>\n03-02-2024\nPower_queryData\n\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/personal/data/power-bi-dax/date-table-fy-column/\">date-table-fy-column</a>\n03-02-2024\nPower_biPower_querym-codedaxData\n\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/personal/data/power-bi-dax/fiscal-month-number-calc/\">FISCAL_MONTH_NUMBER_CALC</a>\n03-02-2024\nPower_biData\n\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/personal/data/power-bi-dax/remove-duplicates-power-bi/\">remove-duplicates-powerBI</a>\n03-02-2024\ndaxPower_biData\n\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/personal/data/power-query-m/count-non-null-values-in-group-by-count/\">count-non-null-values-in-group-by-count</a>\n03-02-2024\nPower_queryData\n\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/personal/data/power-query-m/how-to-remove-duplicates-in-power-query-m-complete-guide/\">How to Remove Duplicates in Power Query M (Complete Guide)</a>\n03-02-2024\nPower_queryData\n\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/personal/data/power-query-m/m-mode-multiple-columns/\">M Mode - Multiple Columns</a>\n03-02-2024\nDatam-codedaxPower_query\n\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/personal/data/power-query-m/m-code-mult-col/\">M-CODE-mult-col</a>\n03-02-2024\nPower_queryData\n\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/personal/data/power-query-m/pq-number-rows-by-group/\">pq - number rows by group</a>\n03-02-2024\nPower_queryDataSTP\n\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/personal/data/power-query-m/pq-addressee-couple-lastnames/\">PQ_addressee_COUPLE_LASTNAMES</a>\n03-02-2024\nPower_queryData\n\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/personal/data/power-query-m/remove-duplicates/\">REMOVE DUPLICATES</a>\n03-02-2024\nPower_queryData\n\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/personal/data/power-query-m/replace-values-multiple-criteria/\">REPLACE VALUES, MULTIPLE CRITERIA </a>\n03-02-2024\nPower_queryData\n\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/personal/data/power-query-m/uppercase-and-underscore-column-names/\">UPPERCASE-AND-UNDERSCORE-COLUMN-NAMES</a>\n03-02-2024\nPower_queryData",
		"tags": [ "note","inbox","Data"]
},

{
		"title": "iDigital Garden",
		"date":"Sat Mar 02 2024 14:00:00 GMT+0000 (Coordinated Universal Time)",
		"url":"/professional/code-snippets/i-digital-garden/",
		"content": "Instructions: How to get Digital Garden to work for Github Pages!\nConcept: https://dg-docs.ole.dev/advanced/hosting-alternatives/\nSteps\n\nClone repository: https://github.com/oleeskild/digitalgarden\n\n(USE THIS TEMPLATE &gt; CREATE A NEW REPOSITORY)\nNAME THE REPOSITORY &quot;&lt;/GITHUBNAME/&gt;.github.io&quot;\n\nConfigure build.yml\n\nhttps://github.com/oleeskild/obsidian-digital-garden/discussions/389\n\nSet repository --&gt; Settings --&gt; Pages --&gt; Source (Deploy from a branch): gh-pages\n\nView Actions and see if they are successful!\n\nbuild.yml\nname: GH Pages\n\non:\npush:\nbranches: [ &quot;main&quot; ]\npull_request:\nbranches: [ &quot;main&quot; ]\n\n# permissions:\n# contents: read\n# pages: write\n# id-token: write\n\n# concurrency:\n# group: &quot;pages&quot;\n# cancel-in-progress: false\n\n# concurrency:\n# group: ${{ github.workflow }}-${{ github.ref }}\n\njobs:\nbuild:\n\nruns-on: ubuntu-22.04\n\nstrategy:\nmatrix:\nnode-version: [20.x]\n# See supported Node.js release schedule at https://nodejs.org/en/about/releases/\n\nsteps:\n- uses: actions/checkout@v4\n- name: Use Node.js ${{ matrix.node-version }}\nuses: actions/setup-node@v4\nwith:\nnode-version: ${{ matrix.node-version }}\ncache: 'npm'\n- run: npm install\n- run: npm run build --if-present\n\n- name: Deploy\nuses: peaceiris/actions-gh-pages@v3\nwith:\ngithub_token: ${{ secrets.GH_TOKEN2 }} # This is from /settings/secrets/actions --&gt; Repository secrets\npublish_dir: ./dist\n\nNOTE: INSTRUCTIONS FOR TOKEN --&gt; ACTION SECRET\nYou will need to add a GH_TOKEN secret to your repo, which should be a github API token having access to your repo. (You can reuse the one you have in your plugin settings)\nYou will also need to name your repository in github, `&lt;username&gt;.github.io`. So in your case `efemkay.github.io`. This is because otherwise the URL will be  `&lt;username&gt;.github.io/&lt;repositoryname&gt;`. This will cause errors when the site tries to get CSS and Javascript from URLs like  `&lt;username&gt;.github.io/styles/style.css`, because they are actually located in `&lt;username&gt;.github.io/&lt;repositoryname&gt;/styles/style.css`.\n\nREFERENCES\nhttps://dg-docs.ole.dev/getting-started/01-getting-started/\nhttps://github.com/marketplace/actions/github-pages-action\nhttps://github.com/peaceiris/actions-gh-pages\nProof of Concept: https://www.linkedin.com/pulse/eleventy-github-pages-lea-tortay\npossibly necessary: https://github.com/peaceiris/actions-gh-pages/issues/736\nand API key: https://stackoverflow.com/questions/76023778/action-failed-with-the-process-usr-bin-git-failed-with-exit-code-128",
		"tags": [ "note","inbox","Portfolio","code"]
}
]